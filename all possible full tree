A full binary tree is a binary tree where each node has exactly 0 or 2 children.
Return a list of all possible full binary trees with N nodes.  Each element of the answer is the root node of one possible tree.
Each node of each tree in the answer must have node.val = 0.
You may return the final list of trees in any order

Example 1:

Input: 7
Output: [[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]]

class Solution:
    def allPossibleFBT(self, N: int) -> List[TreeNode]:
        if (N - 1) % 2 != 0 :
            return []
        
        w = [[TreeNode(0)]]
        for n in range(3,N + 1,2):
            
            a = []
            for x in range(1,n-1, 2):
                l = w[(x-1)//2]
                r = w[(n-x-1)//2]
                for left_tree in l:
                    for right_tree in r:
                        root = TreeNode(0)
                        root.left = left_tree
                        root.right = right_tree
                        a.append(root)
            w.append(add)
        return w[-1]
                
            
        

